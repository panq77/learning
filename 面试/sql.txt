sql
主键与外键：
主键是表中一条数据的唯一标识。外键是另一个表的主键。外键主要用来关联另一张表，维护数据的一致性。
不推荐使用大量外键， 在高吞吐量的情况下要优先保证数据入库。
外键创建和删除：
创建时，直接只当foreign key （columnname）reference table（column）
alter table students add foreign key(cls_id) references classes(id)
删除 alter table teacher drop foreign key


索引：
什么是索引：索引是一种特殊的数据结构，相当于指针，能快速定位搜索的内容。
什么时候用：
           在指定主键的时候，会自动创建index 
           可以自己创建索引（频繁搜索的字段）
		   不用于一些经常更新的字段（更新字段，索引也会更新，效率变低。）
复合索引 可以为多个列创建索引。（一个字段同时有复合索引和单索引，会使用单索引）

视图 ：
视图是一种虚拟存在的表，是一个逻辑表，本身不包含数据
通过视图，可以展现基表的部分数据。
视图的优点：
简单：视图是select语句的结果，也就是说视图已经是经过各种筛选等操作的结果集。不需要再进行复杂操作。
安全：用户只能访问view中有的数据。
数据独立：对基表的操作，不会影响视图的结构。
保障数据安全性，提高查询效率。

视图操作：
格式规范 create or replace view view_name as select语句。
         WITH CHECK OPTION 在对视图DML操作时不会违反定义的where。
         drop view if exists view_name 只会删除视图定义，不会对表有影响。 
		 
对视图的DML操作 会对基表操作。
– select子句中包含distinct
– select子句中包含组函数
– select语句中包含group by子句
– select语句中包含order by子句
– select语句中包含union 、union all等集合运算符
– where子句中包含相关子查询
– from子句中包含多个表
– 如果视图中有计算列，则不能更新
– 如果基表中有某个具有非空约束的列未出现在视图定义中，则不能做insert操作


范式 ：对数据库表的规范
码：所有非主属性 依赖与码，就是码能决定非主属性唯一值。
部分函数依赖 就是单向依赖，一方确定另一方。另一方不能确定这一方。
完全函数依赖 
传递依赖     孙子依赖于爷爷。
1.不能表中有表。每个属性都不可拆分。
2.不存在非主属性对码的部分函数依赖 比如（学号 课名）都不能单独决定分数（非主属性）
3.消除非主属性对主属性的传递依赖。
（相当于 在创建一个部门的时候，因为依赖于主属性员工id而无法创建。这里部门经理依赖于部门，存在传递依赖）

模式拆解：就是将低级模式拆解满足更高级范式。

窗口函数 格式 函数名() over([partition by] [order by] ) 一般在select语句中，对where或group by的结果处理。
对数据库数据进行实时分析处理。



事务：是数据库操作的最小工作单元，是作为单个逻辑工作单元执行的一系列操作；
这些操作作为一个整体一起向系统提交，要么都执行、要么都不执行；
事务是一组不可再分割的操作集合（工作逻辑单元）；


事务的四大特性：

1 、原子性 
事务是由多个操作组成的一个逻辑单元。事务中包含的各操作要么都做，要么都不做 
2 、一致性 
事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。
因此当数据库只包含成功事务提交的结果时，就说数据库处于一致性状态。
如果数据库系统 运行中发生故障，有些事务尚未完成就被迫中断，
这些未完成事务对数据库所做的修改有一部分已写入物理数据库，
这时数据库就处于一种不正确的状态，或者说是 不一致的状态。 
3 、隔离性 
一个事务的执行不能其它事务干扰。
即一个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务之间不能互相干扰。 
4 、持续性 
也称永久性，指一个事务一旦提交，它对数据库中的数据的改变就应该是永久性的。
接下来的其它操作或故障不应该对其执行结果有任何影响。