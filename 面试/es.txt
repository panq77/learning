es简介
  es 是一个开源的可扩展的分布式全文检索引擎，近乎实时的存储，检索数据。 底层是lucene实现所有索引和搜索的功能。
  es的目的是通过简单的restful api 隐藏lucene的复杂性。
  
es对比其他数据库的优势：在模糊查询的时候，像mysql就会全表查询，在面对PB级别的数据时，效率低下。而es会把常查询的字段放在索引库中，
                        从而提高查询效率
es 什么是倒排索引 通过属性的值 找到有属性值的所有地址   就是倒排索引

es的基本概念
1 节点 运行ES的服务器就是一个节点，也有master 但是不是主从关系
2 分片 是es最小存储单位 分片机制，将一个索引切分开，每一个就是一个分片，分片分布在多个节点上，从而使索引内部的数据分布地存储在多个节点上。
3 副本 副本是一个分片的复制，可以由多个吧，其副本不仅是用来容错和恢复，
  还可以提高查询效率。除了更新修改删除操作需要在主分片，查询也可以在副分片，从而提高效率

es的数据结构
1 索引 index 相当于mysql的数据库。
2 类型 Type  逻辑分区 主题的概念。 相当于MYsql的表 在6.0以后一个索引只能有一个类型 在7.0已弃用类型的api 8.0完全删除。
3 文档 文档是lucene操作的原子单位。包含一个或多个域的容器。比如name age interests等多个值域 称为多值域
4 映射 每个索引都有一个映射类型 决定索引的方式 比如某个值域是否分词索引 值得类型是日期，或者数字。


es内部如何存储数据
创建索引时，就会分片，每个分片可以有多个副本，分片会分布在多个节点上，索引的内容也会分布得存储在多个节点上，这样实现分布式存储。
然后es底层时lucene。也是lucene的存储原理lucene用segment来存储数据。通过使用commit文件记录所有segment的元信息。segment存储的是一条条记录document。

es写过程： 
es写入，首先通过hash和主片数找到一个协调节点向其发送写请求，
协调节点对document进行路由，然后对主分片转发请求。主分片在向副本同步。
结束后 协调节点反馈给前端。
底层--
当数据写入，先写入es内存缓冲区，并同时记入translog （记录es操作），然后生成segment。
在生产segment之前会先写入os cache中使其可以立马被检索。
当translog达到一定大小后，会触发commit操作。先写入os cache，每5s持久化到磁盘。
在刷入磁盘前，会先把segment写入系统缓存区，调用fsnyc。

es写流程：
客户端发送请求到任一节点为协调节点，协调节点根据documentid找到分片的位置并转发请求，
（在主片及副分片之间通过轮询选择一个）分片节点处理请求，返回document给协调节点。返回客户端。


es搜索过程：
客户端发送请求到协调节点，协调节点将请求发给所有shard，主副随意，shard处理完的数据返回协调节点（docid）
协调节点对数据进行合并排序 协调节点去各节点拉取实际数据 返回客户端。




es删除过程：
将doc标记为.del，被标记的doc就不会被检索。每次commit操作都会把标记为del的document物理删除。

es 的analyzer 过程   
   1 character filter 去掉html或者将&转化为and  
   2 分词器 tokenizer 按照一定规则分词 比如遇到标点符号或者空格 就会划分词条
   3 token filter 改变为小写 或者过滤掉and the 等没用的词。
   
   
   
es特点：

分布式实时文件存储，可将每一个字段存入索引，使其可以被检索到。 

近乎实时分析的分布式搜索引擎。 

分布式：索引分拆成多个分片，每个分片可有零个或多个副本。

集群中的每个数据节点都可承载一个或多个分片，并且协调和处理各种操作； 负载再平衡和路由在大多数情况下自动完成。

可以扩展到上百台服务器，处理PB级别的结构化或非结构化数据